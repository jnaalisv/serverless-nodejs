service: serverless-demo
provider:
  name: aws
  runtime: nodejs6.10

functions:
  hello:
    name: HelloLambda
    handler: handler.hello
    events:
      - http: GET hello

# these resources work only if the application is already deployed to S3 bucket
# 1. cloudformation create stack
# 2. aws s3 cp build/libs/proto.jar s3://bstalk-backenddeploymentbucket-14hs7m8a18wbe/proto.jar
  another:
    name: AnotherLambda
    handler: handler.another
    events:
      - http: GET another
    environment:
      LAMBDA_ARN:
        'Fn::GetAtt': [HelloLambdaFunction, Arn]
      SERVICE:
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.amazonaws.com/dev"
          ]
        ]

resources:
  Resources:
    SpringBootApplication:
      Type: "AWS::ElasticBeanstalk::Application"
      Properties:
        ApplicationName: "ProtoApplication"
        Description: "Spring boot and elastic beanstalk"

    SpringBootApplicationVersion:
      Type: "AWS::ElasticBeanstalk::ApplicationVersion"
      Properties:
        ApplicationName:
          Ref: "SpringBootApplication"
        Description: "Spring boot and elastic beanstalk app version"
        SourceBundle:
          S3Bucket: "bstalk-backenddeploymentbucket-14hs7m8a18wbe"
          S3Key: "proto.jar"

# TODO bucket name cant be hard coded
#      - s3: ${env:BUCKET}

    SpringBootBeanStalkConfigurationTemplate:
      Type: "AWS::ElasticBeanstalk::ConfigurationTemplate"
      Properties:
        ApplicationName:
          Ref: "SpringBootApplication"
        Description: "A display of speed boot application"
        OptionSettings:
          -
            Namespace: "aws:autoscaling:asg"
            OptionName: "MinSize"
            Value: "2"
          -
            Namespace: "aws:autoscaling:asg"
            OptionName: "MaxSize"
            Value: "2"
          -
            Namespace: "aws:elasticbeanstalk:environment"
            OptionName: "EnvironmentType"
            Value: "LoadBalanced"

        SolutionStackName: "64bit Amazon Linux 2017.09 v2.6.5 running Java 8"

    SpringBootBeanstalkEnvironment:
      Type: "AWS::ElasticBeanstalk::Environment"
      Properties:
        ApplicationName:
          Ref: "SpringBootApplication"
        EnvironmentName: "JavaBeanstalkEnvironment"
        TemplateName:
          Ref: "SpringBootBeanStalkConfigurationTemplate"
        VersionLabel:
          Ref: "SpringBootApplicationVersion"  Outputs:
    HelloUrl:
      Value:
        'Fn::GetAtt': [HelloLambdaFunction, Arn]
